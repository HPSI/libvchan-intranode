--- /root/xen/tools/libvchan/io.c	2013-07-12 17:25:22.000000000 -0500
+++ /root/xen-unstable.hg/tools/libvchan/io.c	2013-07-12 17:53:01.000000000 -0500
@@ -197,6 +211,35 @@
 	return size;
 }
 
+static int do_send_optimized(struct libxenvchan *ctrl, const void *data, size_t size)
+{
+	int real_idx = wr_prod(ctrl) & (wr_ring_size(ctrl) - 1);
+	int avail_contig = wr_ring_size(ctrl) - real_idx;
+	if (VCHAN_DEBUG) {
+		char metainfo[32];
+		struct iovec iov[2];
+		iov[0].iov_base = metainfo;
+		iov[0].iov_len = snprintf(metainfo, 32, "vchan@%p wr", ctrl);
+		iov[1].iov_base = (void *)data;
+		iov[1].iov_len = size;
+		writev(-1, iov, 2);
+	}
+	if (avail_contig > size)
+		avail_contig = size;
+	xen_mb(); /* read indexes /then/ write data */
+	//memcpy(wr_ring(ctrl) + real_idx, data, avail_contig);
+	if (avail_contig < size)
+	{
+		// we rolled across the end of the ring
+		//memcpy(wr_ring(ctrl), data + avail_contig, size - avail_contig);
+	}
+	xen_wmb(); /* write data /then/ notify */
+	wr_prod(ctrl) += size;
+	if (send_notify(ctrl, VCHAN_NOTIFY_WRITE))
+		return -1;
+	return size;
+}
+
 /**
  * returns 0 if no buffer space is available, -1 on error, or size on success
  */
@@ -248,6 +291,36 @@
 	}
 }
 
+int libxenvchan_write_optimized(struct libxenvchan *ctrl, const void *data, size_t size)
+{
+	int avail;
+	if (!libxenvchan_is_open(ctrl))
+		return -1;
+	if (ctrl->blocking) {
+		size_t pos = 0;
+		while (1) {
+			avail = fast_get_buffer_space(ctrl, size - pos);
+			if (pos + avail > size)
+				avail = size - pos;
+			if (avail)
+				pos += do_send_optimized(ctrl, data + pos, avail);
+			if (pos == size)
+				return pos;
+			if (libxenvchan_wait(ctrl))
+				return -1;
+			if (!libxenvchan_is_open(ctrl))
+				return -1;
+		}
+	} else {
+		avail = fast_get_buffer_space(ctrl, size);
+		if (size > avail)
+			size = avail;
+		if (size == 0)
+			return 0;
+		return do_send_optimized(ctrl, data, size);
+	}
+}
+
 static int do_recv(struct libxenvchan *ctrl, void *data, size_t size)
 {
 	int real_idx = rd_cons(ctrl) & (rd_ring_size(ctrl) - 1);
